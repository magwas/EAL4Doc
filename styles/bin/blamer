#!/usr/bin/python

import xml.dom.minidom
import sys
import subprocess

dom=xml.dom.minidom.parse(sys.stdin)

l=sys.argv[5:]

k=['svn', 'blame', '--xml']
k.extend(l)


def getText(nodelist):
    rc = []
    for node in nodelist:
        if node.nodeType == node.TEXT_NODE:
            rc.append(node.data)
    return ''.join(rc)

sys.stdout.write("<root>")
for impact in dom.getElementsByTagName('impact'):
	fromstable=impact.getAttribute("latestcertified")
	tostable=impact.getAttribute("freshestsrc")
	minrev=impact.getAttribute("latestrev")
	maxrev=impact.getAttribute("freshestrev")
	module=impact.getAttribute("module")
	blameargs=impact.getAttribute("blameargs")
	blameargs=blameargs.split(" ")
	if '' in blameargs:
		blameargs.remove('')
	sys.stdout.write('<blaming minstable="%s" maxstable="%s" minrev="%s" maxrev="%s" module="%s">'%(fromstable,tostable,minrev,maxrev,module))
	sys.stdout.flush()
	j = k + blameargs + ['-r',"%s:%s"%(minrev,maxrev)]
	for path in impact.getElementsByTagName('path'):
		path=getText(path.childNodes)
		args = j + [path.replace(fromstable,tostable,1)]
		sys.stderr.write("calling %s \n"%(args,))
		sys.stderr.flush()
		p = subprocess.Popen(args,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
		output=p.communicate()
		stdout=output[0]
		if p.returncode:
			sys.stdout.write('<failed code="%s" path="%s">%s</failed>'%(p.returncode,path.replace("&","&amp;"),output[1].replace("&","&amp;")))
		else:
			sys.stdout.write(stdout[stdout.index('\n')+1:])
		sys.stdout.flush()
	sys.stdout.write("</blaming>")
sys.stdout.write("</root>")
sys.stdout.flush()
